{{- define "microservice.deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: {{ .replicaCount }}
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .service.port }}
          resources:
            {{- toYaml .resources | nindent 12 }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ $.Values.global.environment }}
            - name: SPRING_CLOUD_CONSUL_HOST
              value: "{{ $.Values.serviceRegistry.name }}"
            - name: SPRING_JWT_SECRET
              value: "{{ $.Values.secretsValues.jwtSecretInService }}"
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "{{ $.Values.serviceRegistry.service.port }}"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_REGISTER
              value: "true"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_ENABLED
              value: "true"
            - name: SPRING_CLOUD_CONSUL_CONFIG_ENABLED
              value: "false"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_PATH
              value: "/actuator/health"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_INTERVAL
              value: "15s"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_TIMEOUT
              value: "5s"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HEALTH_CHECK_CRITICAL_TIMEOUT
              value: "30s"
            - name: SPRING_RABBITMQ_HOST
              value: "{{ $.Values.eventBus.name }}"
            - name: SPRING_RABBITMQ_PORT
              value: "{{ $.Values.eventBus.service.port }}"
            - name: SPRING_RABBITMQ_USERNAME
              value: "user"
            - name: SPRING_RABBITMQ_PASSWORD
              value: "password"
            - name: SPRING_DATASOURCE_HOST
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: host
            - name: SPRING_DATASOURCE_PORT
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: port
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"
            {{- if eq .name "auth-service" }}
            - name: SPRING_DATASOURCE_DATABASE
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: database
            {{- end }}
            {{- if eq .name "customer-service" }}
            - name: SPRING_DATASOURCE_CUSTOMER_SERVICE_DATABASE
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: customer-database
            {{- end }}
            {{- if eq .name "reward-service" }}
            - name: SPRING_DATASOURCE_REWARD_SERVICE_DATABASE
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: reward-database
            {{- end }}
            {{- if eq .name "challenge-service" }}
            - name: SPRING_DATASOURCE_CHALLENGE_SERVICE_DATABASE
              valueFrom:
                secretKeyRef:
                  name: azure-postgres-secret
                  key: challenge-database
            {{- end }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .service.port }}
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  type: ClusterIP
  ports:
    - port: {{ .service.port }}
      targetPort: {{ .service.port }}
      protocol: TCP
      name: http
  selector:
    app: {{ .name }}
{{- end -}} 