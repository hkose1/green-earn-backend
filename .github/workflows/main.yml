name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Build Java Services with Maven
        run: |
          set -e

          declare -A javaServices=(
            [mail-service]="green-earn-mail-service"
            [auth-service]="green-earn-auth-service"
            [customer-service]="green-earn-customer-service"
            [reward-service]="green-earn-reward-service"
            [challenge-service]="green-earn-challenge-service"
          )

          for service in "${!javaServices[@]}"; do
            if [ -f "services/$service/pom.xml" ]; then
              echo "Building $service..."
              cd "services/$service"
              mvn clean install -DskipTests
              cd ../..
            fi
          done
          
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: Build and Push Docker Images
        run: |
          set -e

          declare -A coreServices=(
            [api-gateway]="green-earn-api-gateway"
            [event-bus]="green-earn-event-bus"
            [service-registry]="green-earn-service-registry"
          )

          for service in "${!coreServices[@]}"; do
            imageName="${{ secrets.ACR_LOGIN_SERVER }}/${coreServices[$service]}:${{ github.sha }}"
            if [ -f "$service/Dockerfile" ]; then
              echo "Building and pushing $service..."
              docker build --no-cache -t "$imageName" "$service"
              docker push "$imageName"
            fi
          done

          declare -A javaServices=(
            [mail-service]="green-earn-mail-service"
            [auth-service]="green-earn-auth-service"
            [customer-service]="green-earn-customer-service"
            [reward-service]="green-earn-reward-service"
            [challenge-service]="green-earn-challenge-service"
          )

          for service in "${!javaServices[@]}"; do
            imageName="${{ secrets.ACR_LOGIN_SERVER }}/${javaServices[$service]}:${{ github.sha }}"
            if [ -f "services/$service/Dockerfile" ]; then
              echo "Building and pushing $service..."
              docker build --no-cache -t "$imageName" "services/$service"
              docker push "$imageName"
            fi
          done

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          set -e

          cd deployment/helm/green-earn

          echo "Creating namespace if it doesn't exist..."
          kubectl create namespace green-earn --dry-run=client -o yaml | kubectl apply -f -

          echo "Creating PostgreSQL secret..."
          kubectl delete secret azure-postgres-secret -n green-earn --ignore-not-found|| true
          sleep 10
          kubectl create secret generic azure-postgres-secret \
            --from-literal=host=${{ secrets.AZURE_POSTGRES_HOST }} \
            --from-literal=port=${{ secrets.AZURE_POSTGRES_PORT }} \
            --from-literal=database=${{ secrets.AZURE_POSTGRES_DATABASE }} \
            --from-literal=customer-database=${{ secrets.AZURE_POSTGRES_CUSTOMER_SERVICE_DATABASE }} \
            --from-literal=reward-database=${{ secrets.AZURE_POSTGRES_REWARD_SERVICE_DATABASE }} \
            --from-literal=challenge-database=${{ secrets.AZURE_POSTGRES_CHALLENGE_SERVICE_DATABASE }} \
            --from-literal=username=${{ secrets.AZURE_POSTGRES_USERNAME }} \
            --from-literal=password=${{ secrets.AZURE_POSTGRES_PASSWORD }} \
            -n green-earn --dry-run=client -o yaml | kubectl apply -f -

          echo "Deleting existing kong configmap..."
          kubectl delete configmap kong-config -n green-earn --ignore-not-found || true
          sleep 10

          echo "Preparing Helm upgrade command..."
          helm_values=(
            "global.environment=production"
            "global.acrLoginServer=${{ secrets.ACR_LOGIN_SERVER }}"
          )

          declare -A services=(
            [apiGateway]=green-earn-api-gateway
            [eventBus]=green-earn-event-bus
            [serviceRegistry]=green-earn-service-registry
            [authService]=green-earn-auth-service
            [mailService]=green-earn-mail-service
            [customerService]=green-earn-customer-service
            [rewardService]=green-earn-reward-service
            [challengeService]=green-earn-challenge-service
          )

          for key in "${!services[@]}"; do
            repo="${{ secrets.ACR_LOGIN_SERVER }}/${services[$key]}"
            tag="${{ github.sha }}"
            helm_values+=("${key}.image.repository=${repo}")
            helm_values+=("${key}.image.tag=${tag}")
          done

          echo "Deploying with Helm..."
          helm upgrade --install green-earn . \
            --namespace green-earn \
            --create-namespace \
            --set $(IFS=,; echo "${helm_values[*]}")
