name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Install Maven
        run: |
          $mavenVersion = "3.9.6"
          $mavenUrl = "https://dlcdn.apache.org/maven/maven-3/$mavenVersion/binaries/apache-maven-$mavenVersion-bin.zip"
          $mavenZip = "maven.zip"
          
          Invoke-WebRequest -Uri $mavenUrl -OutFile $mavenZip
          Expand-Archive -Path $mavenZip -DestinationPath "C:\Program Files" -Force
          
          $env:Path = "$env:Path;C:\Program Files\apache-maven-$mavenVersion\bin"
          
      - name: Build Java Services
        run: |
          $ErrorActionPreference = "Stop"
          
          if (Test-Path "services/mail-service/pom.xml") {
            cd services/mail-service
            & "C:\Program Files\apache-maven-3.9.6\bin\mvn.cmd" clean install -DskipTests
            cd ../..
          }
          
          if (Test-Path "services/auth-service/pom.xml") {
            cd services/auth-service
            & "C:\Program Files\apache-maven-3.9.6\bin\mvn.cmd" clean install -DskipTests
            cd ../..
          }
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and Push Docker images
        run: |
          $ErrorActionPreference = "Stop"
          
          # Core services
          $coreServices = @{
            "api-gateway" = "green-earn-api-gateway"
            "event-bus" = "green-earn-event-bus"
            "service-registry" = "green-earn-service-registry"
          }
          
          foreach ($service in $coreServices.Keys) {
            $dockerfilePath = "$service/Dockerfile"
            if (Test-Path $dockerfilePath) {
              $content = Get-Content $dockerfilePath -Raw
              if ($content -and $content.Trim() -ne "") {
                cd "$service"
                Write-Host "Building and pushing $service..."
                docker build --no-cache -t "${{ secrets.DOCKER_HUB_USERNAME }}/$($coreServices[$service]):latest" .
                docker push "${{ secrets.DOCKER_HUB_USERNAME }}/$($coreServices[$service]):latest"
                cd ..
              }
            }
          }
          
          # Microservices
          $services = @(
            "auth-service"
            "mail-service"
          )
          
          foreach ($service in $services) {
            $dockerfilePath = "services/$service/Dockerfile"
            $dockerComposePath = "services/$service/docker-compose.yml"
            if (Test-Path $dockerfilePath) {
              $content = Get-Content $dockerfilePath -Raw
              if ($content -and $content.Trim() -ne "") {
                Write-Host "Building and pushing $service..."
                cd "services/$service"
                docker compose build --no-cache
                docker compose push
                cd ../..
              }
            }
          }

  deploy:
    needs: build-and-test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Helm
        run: |
          $ErrorActionPreference = "Stop"
          $helmVersion = "3.14.2"
          $helmUrl = "https://get.helm.sh/helm-v$helmVersion-windows-amd64.zip"
          $helmZip = "helm.zip"
          $helmPath = "C:\Program Files\helm\windows-amd64"
          
          Invoke-WebRequest -Uri $helmUrl -OutFile $helmZip
          Expand-Archive -Path $helmZip -DestinationPath "C:\Program Files\helm" -Force
          
          $currentPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          if ($currentPath -notlike "*$helmPath*") {
            [Environment]::SetEnvironmentVariable("Path", "$currentPath;$helmPath", "Machine")
          }
          
          $env:Path = "$env:Path;$helmPath"
          
          & "$helmPath\helm.exe" version
          
      - name: Configure kubectl
        run: |
          $ErrorActionPreference = "Stop"
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          $env:KUBECONFIG = "kubeconfig.yaml"
          
      - name: Deploy to Kubernetes
        run: |
          $ErrorActionPreference = "Stop"
          cd deployment/helm/green-earn
          
          # Önce namespace'i oluştur
          kubectl create namespace green-earn --dry-run=client -o yaml | kubectl apply -f -
          
          # Helm deployment
          & "C:\Program Files\helm\windows-amd64\helm.exe" upgrade --install green-earn . `
            --namespace green-earn `
            --create-namespace `
            --set global.environment=production `
            --set apiGateway.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-api-gateway `
            --set eventBus.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-event-bus `
            --set serviceRegistry.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-service-registry `
            --set authService.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-auth-service `
            --set mailService.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-mail-service `
            --set customerService.image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/green-earn-customer-service `
            --set authService.postgresql.enabled=true `
            --set authService.postgresql.auth.username=postgres `
            --set authService.postgresql.auth.password=postgres `
            --set authService.postgresql.auth.database=auth_service 